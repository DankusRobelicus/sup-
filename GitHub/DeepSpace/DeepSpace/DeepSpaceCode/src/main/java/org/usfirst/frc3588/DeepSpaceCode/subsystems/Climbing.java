// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3588.DeepSpaceCode.subsystems;


import org.usfirst.frc3588.DeepSpaceCode.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedControllerGroup;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Climbing extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Encoder frontEncoder1;
    private Encoder frontEncoder2;
    private Encoder backEncoder;
    private WPI_TalonSRX frontClimbMotor1;
    private WPI_TalonSRX frontClimbMotor2;
    private WPI_TalonSRX backClimbMotor;
    private WPI_TalonSRX movingClimbMotor1;
    private WPI_TalonSRX movingClimbMotor2;
    private SpeedControllerGroup speedControllerGroup1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Climbing() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        frontEncoder1 = new Encoder(3, 4, false, EncodingType.k4X);
        addChild("frontEncoder1",frontEncoder1);
        frontEncoder1.setDistancePerPulse(1.0);
        frontEncoder1.setPIDSourceType(PIDSourceType.kRate);
        
        frontEncoder2 = new Encoder(5, 6, false, EncodingType.k4X);
        addChild("frontEncoder2",frontEncoder2);
        frontEncoder2.setDistancePerPulse(1.0);
        frontEncoder2.setPIDSourceType(PIDSourceType.kRate);
        
        backEncoder = new Encoder(7, 8, false, EncodingType.k4X);
        addChild("backEncoder",backEncoder);
        backEncoder.setDistancePerPulse(1.0);
        backEncoder.setPIDSourceType(PIDSourceType.kRate);
        
        frontClimbMotor1 = new WPI_TalonSRX(3);
        
        
        
        frontClimbMotor2 = new WPI_TalonSRX(7);
        
        
        
        backClimbMotor = new WPI_TalonSRX(8);
        
        
        
        movingClimbMotor1 = new WPI_TalonSRX(9);
        
        
        
        movingClimbMotor2 = new WPI_TalonSRX(10);
        
        
        
        speedControllerGroup1 = new SpeedControllerGroup(movingClimbMotor1, movingClimbMotor2  );
        addChild("Speed Controller Group 1",speedControllerGroup1);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

